<?php
namespace devmx\Teamspeak3\Query;

use devmx\Teamspeak3\Query\CommandAwareQuery;

/**
 * Test class for CommandAwareQuery.
 * Generated by PHPUnit on 2012-03-28 at 14:23:59.
 */
class CommandAwareQueryTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var CommandAwareQuery
     */
    protected $commandQuery;
    protected $stub;
    protected $transport;
    /**
     * @var ServerQuery
     */
    protected $query;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->stub = new Transport\QueryTransportStub;
        $this->transport = new Transport\Decorator\DebuggingDecorator($this->stub);
        $this->query = new ServerQuery($this->transport);

        $this->commandQuery = $this->getMockBuilder("devmx\Teamspeak3\Query\CommandAwareQuery")
                ->setConstructorArgs(array($this->query))
                ->setMethods(array("query"))->getMock();

        $this->commandQuery->connect();
    }

    /**
     * @covers CommandAwareQuery::version
     */
    public function testVersion()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("version"));
        $this->commandQuery->version();
    }

    /**
     * @covers CommandAwareQuery::hostInfo
     */
    public function testHostInfo()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("hostinfo"));
        $this->commandQuery->hostInfo();

    }

    /**
     * @covers CommandAwareQuery::instanceInfo
     */
    public function testInstanceInfo()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("instanceinfo"));
        $this->commandQuery->instanceInfo();
    }

    /**
     * @covers CommandAwareQuery::instanceEdit
     */
    public function testInstanceEdit()
    {
        $properties = array(
            "serverinstance_template_serveradmin_group" => 1,
            "serverinstance_max_download_total_bandwitdh" => 99999,
        );

        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("instanceedit"), $this->equalTo($properties));
        $this->commandQuery->instanceEdit($properties);
    }

    /**
     * @covers CommandAwareQuery::bindingList
     */
    public function testBindingList()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("bindinglist"));
        $this->commandQuery->bindingList();
    }

    /**
     * @covers CommandAwareQuery::serverList
     */
    public function testServerList()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("serverlist"));
        $this->commandQuery->serverList();
    }

    /**
     * @covers CommandAwareQuery::serverIdGetByPort
     */
    public function testServerIdGetByPort()
    {
        $args = array("virtualserver_port" => 1000);
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("serveridgetbyport"), $this->equalTo($args));
        $this->commandQuery->serverIdGetByPort(1000);
    }

    /**
     * @covers CommandAwareQuery::serverDelete
     */
    public function testServerDelete()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("serverdelete"), $this->equalTo(array("sid" => 12)));
        $this->commandQuery->serverDelete(12);
    }

    /**
     * @covers CommandAwareQuery::serverCreate
     */
    public function testServerCreate()
    {
        $serverName = "Testserver";
        $expectedArgs = array("virtualserver_name" => $serverName, "server_test" => 12);
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("servercreate"), $this->equalTo($expectedArgs));
        $this->commandQuery->serverCreate($serverName, array("server_test" => 12));
    }

    /**
     * @covers CommandAwareQuery::serverStart
     */
    public function testServerStart()
    {
        $serverId = 12;
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("serverstart"), $this->equalTo(array("sid" => $serverId)));
        $this->commandQuery->serverStart($serverId);
    }

    /**
     * @covers CommandAwareQuery::serverStop
     */
    public function testServerStop()
    {
        $serverId = 12;
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("serverstop"), $this->equalTo(array("sid" => $serverId)));
        $this->commandQuery->serverStop($serverId);
    }

    /**
     * @covers CommandAwareQuery::serverProcessStop
     */
    public function testServerProcessStop()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("serverprocessstop"));
        $this->commandQuery->serverProcessStop();
    }

    /**
     * @covers CommandAwareQuery::serverInfo
     */
    public function testServerInfo()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("serverinfo"));
        $this->commandQuery->serverInfo();
    }

    /**
     * @covers CommandAwareQuery::serverRequestConnectionInfo
     */
    public function testServerRequestConnectionInfo()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("serverrequestconnectioninfo"));
        $this->commandQuery->serverRequestConnectionInfo();
    }

    /**
     * @covers CommandAwareQuery::serverTempPasswordAdd
     */
    public function testServerTempPasswordAdd()
    {
        $pw = "testpw";
        $duration = 3600;
        $desc = "Test description";
        $tcid = 0;
        $expectedArgs = array(
            "pw" => $pw,
            "duration" => $duration,
            "desc" => $desc,
            "tcid" => $tcid,
        );
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("servertemppasswordadd"), $this->equalTo($expectedArgs));
        $this->commandQuery->serverTempPasswordAdd($pw, $desc, $duration);
    }

    /**
     * @covers CommandAwareQuery::serverTempPasswordDel
     */
    public function testServerTempPasswordDel()
    {
        $pw = "test password";
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("servertemppassworddel"), $this->equalTo(array("pw" => $pw)));
        $this->commandQuery->serverTempPasswordDel($pw);
    }

    /**
     * @covers CommandAwareQuery::serverTempPasswordList
     */
    public function testServerTempPasswordList()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("servertemppasswordlist"));
        $this->commandQuery->serverTempPasswordList();
    }

    /**
     * @covers CommandAwareQuery::serverEdit
     */
    public function testServerEdit()
    {
        $args = array(
            "virtualserver_maxclients" => 400
        );
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("serveredit"), $this->equalTo($args));
        $this->commandQuery->serverEdit($args);
    }

    /**
     * @covers CommandAwareQuery::serverGroupList
     */
    public function testServerGroupList()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("servergrouplist"));
        $this->commandQuery->serverGroupList();
    }

    /**
     * @covers CommandAwareQuery::serverGroupAdd
     */
    public function testServerGroupAdd()
    {
        $groupName = "New Test group";
        $expectedArgs = array(
            "type" => 1,
            "name" => $groupName
        );
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("servergroupadd"));
        $this->commandQuery->serverGroupAdd($groupName, 1);
    }

    /**
     * @covers CommandAwareQuery::serverGroupDel
     */
    public function testServerGroupDel()
    {
        $groupId = 20;
        $expectedArgs = array(
            "sgid" => $groupId,
            "force" => false,
        );
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("servergroupdel"), $this->equalTo($expectedArgs));
        $this->commandQuery->serverGroupDel($groupId);
    }

    /**
     * @covers CommandAwareQuery::serverGroupCopy
     */
    public function testServerGroupCopy()
    {
        $sourceId = 12;
        $groupName = "New server group";
        $expectedArgs = array(
            "ssgid" => $sourceId,
            "tsgid" => 0,
            "name" => $groupName,
            "type" => 1
        );
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("servergroupcopy"), $this->equalTo($expectedArgs));
        $this->commandQuery->serverGroupCopy($sourceId, 0, $groupName);
    }

    /**
     * @covers CommandAwareQuery::serverGroupRename
     */
    public function testServerGroupRename()
    {
        $sgId = 12;
        $newName = "New name for server group";
        $exptedArgs = array(
            "sgid" => $sgId,
            "name" => $newName,
        );
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("servergrouprename"), $this->equalTo($exptedArgs));
        $this->commandQuery->serverGroupRename($sgId, $newName);
    }

    /**
     * @covers CommandAwareQuery::serverGroupPermList
     */
    public function testServerGroupPermList()
    {
        $sgid = 23;
        $expectedArgs = array("sgid" => $sgid);
        $expectedOptions = array("permsid");
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("servergrouppermlist"), $this->equalTo($expectedArgs), $this->equalTo($expectedOptions));
        $this->commandQuery->serverGroupPermList($sgid, true);
    }

    /**
     * @covers CommandAwareQuery::serverGroupAddPerm
     */
    public function testServerGroupAddPerm()
    {
        $sgid = 42;
        $permissions = array(
            "permsid" => "b_virtualserver_servergroup_create",
            "permvalue" => 1,
            "permskip" => 0,
            "permnegated" => 0,
        );
        $expectedArgs = $permissions;
        $expectedArgs["sgid"] = $sgid;
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("servergroupaddperm"), $this->equalTo($expectedArgs));
        $this->commandQuery->serverGroupAddPerm($sgid, $permissions);
    }

    /**
     * @covers CommandAwareQuery::serverGroupDelPerm
     */
    public function testServerGroupDelPerm()
    {
        $sgid = 42;
        $permissions = array("permid" => 2342);
        $expectedArgs = $permissions;
        $expectedArgs["sgid"] = $sgid;
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("servergroupdelperm"), $this->equalTo($expectedArgs));
        $this->commandQuery->serverGroupDelPerm($sgid, $permissions);
    }

    /**
     * @covers CommandAwareQuery::serverGroupAddClient
     */
    public function testServerGroupAddClient()
    {
        $sgid = 42;
        $clientId = 23;
        $expectedArgs = array(
            "sgid" => $sgid,
            "cldbid" => $clientId
        );
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("servergroupaddclient"), $this->equalto($expectedArgs));
        $this->commandQuery->serverGroupAddClient($sgid, $clientId);
    }

    /**
     * @covers CommandAwareQuery::serverGroupDelClient
     */
    public function testServerGroupDelClient()
    {
        $sgid = 23;
        $clientId = 42;
        $expectedArgs = array(
            "sgid" => $sgid,
            "cldbid" => $clientId
        );
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("servergroupdelclient"), $this->equalTo($expectedArgs));
        $this->commandQuery->serverGroupDelClient($sgid, $clientId);
    }

    /**
     * @covers CommandAwareQuery::serverGroupClientList
     */
    public function testServerGroupClientList()
    {
        $sgid = 23;
        $expectedArgs = array("sgid" => $sgid);
        $expectedOptions = array("names");
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("servergroupclientlist"), $this->equalTo($expectedArgs), $this->equalTo($expectedOptions));
        $this->commandQuery->serverGroupClientList($sgid, true);
    }

    /**
     * @covers CommandAwareQuery::serverGroupClientList
     */
    public function testServerGroupClientListWithoutNames()
    {
        $sgid = 23;
        $expectedArgs = array("sgid" => $sgid);
        $expectedOptions = array();
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("servergroupclientlist"), $this->equalTo($expectedArgs), $this->equalTo($expectedOptions));
        $this->commandQuery->serverGroupClientList($sgid, false);
    }

    /**
     * @covers CommandAwareQuery::serverGroupsByClientId
     */
    public function testServerGroupsByClientId()
    {
        $clientId = 42;
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("servergroupsbyclientid"), $this->equalTo(array("cldbid" => $clientId)));
        $this->commandQuery->serverGroupsByClientId($clientId);
    }

    /**
     * @covers CommandAwareQuery::serverGroupAutoAddPerm
     */
    public function testServerGroupAutoAddPerm()
    {
        $groupType = 25;
        $permissions = array(
            "permid" => 23,
            "permvalue" => 1,
            "permnegated" => 0,
            "permskip" => 1
        );
        $expectedArgs = array(
            "sgtype" => $groupType,
        );
        $expectedArgs = array_merge($permissions, $expectedArgs);
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("servergroupautoaddperm"), $this->equalTo($expectedArgs));
        $this->commandQuery->serverGroupAutoAddPerm($groupType, $permissions);
    }

    /**
     * @covers CommandAwareQuery::serverGroupAutoDelPerm
     */
    public function testServerGroupAutoDelPerm()
    {
        $groupType = 25;
        $permissions = array(
            "permid" => 23,
            "permvalue" => 1,
            "permnegated" => 0,
            "permskip" => 1
        );
        $expectedArgs = array(
            "sgtype" => $groupType,
        );
        $expectedArgs = array_merge($permissions, $expectedArgs);
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("servergroupautodelperm"), $this->equalTo($expectedArgs));
        $this->commandQuery->serverGroupAutoDelPerm($groupType, $permissions);
    }

    /**
     * @covers CommandAwareQuery::serverSnapshotCreate
     */
    public function testServerSnapshotCreate()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("serversnapshotcreate"));
        $this->commandQuery->serverSnapshotCreate();
    }

    /**
     * @covers CommandAwareQuery::serverSnapshotDeploy
     */
    public function testServerSnapshotDeploy()
    {
        $args = array(
            "hash" => "552kieuQLE#4%",
            "virtualserver_unique_identifier" => "X2RYgA06kwDnI7QQcz3rosdmveM=",
            "virtualserver_name" => "TeamSpeak ]I[ Server"
        );
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("serversnapshotdeploy"), $this->equalTo($args));
        $this->commandQuery->serverSnapshotDeploy($args);
    }

    /**
     * @covers CommandAwareQuery::serverNotifyRegister
     */
    public function testServerNotifyRegister()
    {
        $event = "channel";
        $channelId = 23;
        $expectedArgs = array(
            "id" => $channelId,
            "event" => $event,
        );
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("servernotifyregister"));
        $this->commandQuery->serverNotifyRegister($event, $channelId);
    }

    /**
     * @covers CommandAwareQuery::serverNotifyUnregister
     */
    public function testServerNotifyUnregister()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("servernotifyunregister"));
        $this->commandQuery->serverNotifyUnregister();
    }

    /**
     * @covers CommandAwareQuery::sendTextMessage
     */
    public function testSendTextMessage()
    {
        $target = 1;
        $id = 8;
        $message = "Test message";
        $expectedArgs = array(
            "targetmode" => $target,
            "target" => $id,
            "msg" => $message
        );
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("sendtextmessage"), $this->equalTo($expectedArgs));
        $this->commandQuery->sendTextMessage($target, $id, $message);
    }

    /**
     * @covers CommandAwareQuery::logview
     */
    public function testLogView()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("logview"));
        $this->commandQuery->logview();
    }

    /**
     * @covers CommandAwareQuery::logAdd
     */
    public function testLogAdd()
    {
        $message = "test";
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("logadd"));
        $this->commandQuery->logAdd($message);
    }

    /**
     * @covers CommandAwareQuery::gm
     */
    public function testGm()
    {
        $message = "Test message";
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("gm"));
        $this->commandQuery->gm($message);
    }

    /**
     * @covers CommandAwareQuery::channelList
     */
    public function testChannelList()
    {
        $expectedOptions = array(
            "topic",
            "flags",
            "voice",
            "limits",
            "icon"
        );
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("channellist"), $this->equalTo(array()), $this->equalTo($expectedOptions));
        $this->commandQuery->channelList(true, true, true, true, true);
    }

    /**
     * @covers CommandAwareQuery::channelInfo
     */
    public function testChannelInfo()
    {
        $channelId = 23;
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("channelinfo"));
        $this->commandQuery->channelInfo($channelId);
    }

    /**
     * @covers CommandAwareQuery::channelFind
     */
    public function testChannelFind()
    {
        $name = "Default";
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("channelfind"));
        $this->commandQuery->channelFind($name);
    }

    /**
     * @covers CommandAwareQuery::channelMove
     */
    public function testChannelMove()
    {
        $channelId = 42;
        $parentId = 23;
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("channelmove"));
        $this->commandQuery->channelMove($channelId, $parentId);
    }

    /**
     * @covers CommandAwareQuery::channelCreate
     */
    public function testChannelCreate()
    {
        $name = "Channel name";
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("channelcreate"));
        $this->commandQuery->channelCreate($name);
    }

    /**
     * @covers CommandAwareQuery::channelDelete
     */
    public function testChannelDelete()
    {
        $channelId = 23;
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("channeldelete"));
        $this->commandQuery->channelDelete($channelId);
    }

    /**
     * @covers CommandAwareQuery::channelEdit
     */
    public function testChannelEdit()
    {
        $channelId = 23;
        $properties = array(
            "test" => "test"
        );
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("channeledit"));
        $this->commandQuery->channelEdit($channelId, $properties);
    }

    /**
     * @covers CommandAwareQuery::channelGroupList
     */
    public function testChannelGroupList()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("channelgrouplist"));
        $this->commandQuery->channelGroupList();
    }

    /**
     * @covers CommandAwareQuery::channelGroupAdd
     */
    public function testChannelGroupAdd()
    {
        $name = "Test group";
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("channelgroupadd"));
        $this->commandQuery->channelGroupAdd($name);
    }

    /**
     * @covers CommandAwareQuery::channelGroupDel
     */
    public function testChannelGroupDel()
    {
        $groupId = 23;
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("channelgroupdel"));
        $this->commandQuery->channelGroupDel($groupId);
    }

    /**
     * @covers CommandAwareQuery::channelGroupCopy
     */
    public function testChannelGroupCopy()
    {
        $sourceId = 23;
        $targetId = 0;
        $name = "new Test group";
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("channelgroupcopy"));
        $this->commandQuery->channelGroupCopy($sourceId, $targetId, $name);
    }

    /**
     * @covers CommandAwareQuery::channelGroupRename
     */
    public function testChannelGroupRename()
    {
        $groupId = 23;
        $name = "Renamed test group";
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("channelgrouprename"));
        $this->commandQuery->channelGroupRename($groupId, $name);
    }

    /**
     * @covers CommandAwareQuery::channelGroupAddPerm
     */
    public function testChannelGroupAddPerm()
    {
        $groupId = 23;
        $permissions = array();
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("channelgroupaddperm"));
        $this->commandQuery->channelGroupAddPerm($groupId, $permissions);
    }

    /**
     * @covers CommandAwareQuery::channelGroupPermList
     */
    public function testChannelGroupPermList()
    {
        $groupId = 23;
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("channelgrouppermlist"));
        $this->commandQuery->channelGroupPermList($groupId);
    }

    /**
     * @covers CommandAwareQuery::channelGroupDelPerm
     */
    public function testChannelGroupDelPerm()
    {
        $groupId = 23;
        $permissions = array();
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("channelgroupdelperm"));
        $this->commandQuery->channelGroupDelPerm($groupId, $permissions);
    }

    /**
     * @covers CommandAwareQuery::channelGroupClientList
     */
    public function testChannelGroupClientList()
    {
        $channelId = 67;
        $clientId = 52;
        $groupId = 77;
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("channelgroupclientlist"));
        $this->commandQuery->channelGroupClientList($channelId, $clientId, $groupId);
    }

    /**
     * @covers CommandAwareQuery::setClientChannelGroup
     */
    public function testSetClientChannelGroup()
    {
        $groupId = 67;
        $channelID = 23;
        $clientId = 88;
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("setclientchannelgroup"));
        $this->commandQuery->setClientChannelGroup($groupId, $channelID, $clientId);
    }

    /**
     * @covers CommandAwareQuery::channelPermList
     */
    public function testChannelPermList()
    {
        $channelId = 23;
        $expectedOptions = array("permsid");
        $expectedArgs = array("cid" => $channelId);
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("channelpermlist"), $this->equalTo($expectedArgs), $this->equalTo($expectedOptions));
        $this->commandQuery->channelPermList($channelId, true);
    }

    /**
     * @covers CommandAwareQuery::channelAddPerm
     */
    public function testChannelAddPerm()
    {
        $channelId = 829;
        $permissions = array();
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("channeladdperm"));
        $this->commandQuery->channelAddPerm($channelId, $permissions);
    }

    /**
     * @covers CommandAwareQuery::channelDelPerm
     */
    public function testChannelDelPerm()
    {
        $channelId = 874;
        $permissions = array();
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("channeldelperm"));
        $this->commandQuery->channelDelPerm($channelId, $permissions);
    }

    /**
     * @covers CommandAwareQuery::clientList
     */
    public function testClientList()
    {
        $expectedOptions = array(
            "uid",
            "away",
            "voice",
            "times",
            "groups",
            "info",
            "icon",
        );
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("clientlist"), $this->equalTo(array()), $this->equalTo($expectedOptions));
        $this->commandQuery->clientList(true, true, true, true, true, true, true);
    }

    /**
     * @covers CommandAwareQuery::clientInfo
     */
    public function testClientInfo()
    {
        $clientId = 88;
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("clientinfo"));
        $this->commandQuery->clientInfo($clientId);
    }

    /**
     * @covers CommandAwareQuery::clientFind
     */
    public function testClientFind()
    {
        $name = "Test client";
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("clientfind"));
        $this->commandQuery->clientFind($name);
    }

    /**
     * @covers CommandAwareQuery::clientEdit
     */
    public function testClientEdit()
    {
        $clientId = 23;
        $properties = array(
            "client_nickname" => "New name"
        );
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("clientedit"));
        $this->commandQuery->clientEdit($clientId, $properties);
    }

    /**
     * @covers CommandAwareQuery::clientDbList
     */
    public function testClientDbList()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("clientdblist"));
        $this->commandQuery->clientDbList();
    }

    /**
     * @covers CommandAwareQuery::clientDbInfo
     */
    public function testClientDbInfo()
    {
        $clientId = 2384;
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("clientdbinfo"));
        $this->commandQuery->clientDbInfo($clientId);
    }

    /**
     * @covers CommandAwareQuery::clientDbFind
     */
    public function testClientDbFind()
    {
        $name = "Db client";
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("clientdbfind"));
        $this->commandQuery->clientDbFind($name);
    }

    /**
     * @covers CommandAwareQuery::clientDbEdit
     */
    public function testClientDbEdit()
    {
        $clientId = 23;
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("clientdbedit"));
        $this->commandQuery->clientDbEdit($clientId, array());
    }

    /**
     * @covers CommandAwareQuery::clientDbDelete
     */
    public function testClientDbDelete()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("clientdbdelete"));
        $this->commandQuery->clientDbDelete(23);
    }

    /**
     * @covers CommandAwareQuery::clientGetIds
     */
    public function testClientGetIds()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("clientgetids"));
        $this->commandQuery->clientGetIds("er32T%75");
    }

    /**
     * @covers CommandAwareQuery::clientGetDbIdFromUid
     */
    public function testClientGetDbIdFromUid()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("clientgetdbidfromuid"));
        $this->commandQuery->clientGetDbIdFromUid("ZZU755FQ#§");
    }

    /**
     * @covers CommandAwareQuery::clientGetNameFromUid
     */
    public function testClientGetNameFromUid()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("clientgetnamefromuid"));
        $this->commandQuery->clientGetNameFromUid("j4i3$$24");
    }

    /**
     * @covers CommandAwareQuery::clientGetNameFromDbId
     */
    public function testClientGetNameFromDbId()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("clientgetnamefromdbid"));
        $this->commandQuery->clientGetNameFromDbId(23);
    }

    /**
     * @covers CommandAwareQuery::clientSetServerQueryLogin
     */
    public function testClientSetServerQueryLogin()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("clientsetserverquerylogin"));
        $this->commandQuery->clientSetServerQueryLogin("Username");
    }

    /**
     * @covers CommandAwareQuery::clientUpdate
     */
    public function testClientUpdate()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("clientupdate"));
        $this->commandQuery->clientUpdate(array());
    }

    /**
     * @covers CommandAwareQuery::clientMove
     */
    public function testClientMove()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("clientmove"));
        $this->commandQuery->clientMove(23, 58);
    }

    /**
     * @covers CommandAwareQuery::clientKick
     */
    public function testClientKick()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("clientkick"));
        $this->commandQuery->clientKick(98);
    }

    /**
     * @covers CommandAwareQuery::clientPoke
     */
    public function testClientPoke()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("clientpoke"));
        $this->commandQuery->clientPoke(23, "message");
    }

    /**
     * @covers CommandAwareQuery::clientPermList
     */
    public function testClientPermList()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("clientpermlist"));
        $this->commandQuery->clientPermList(23);
    }

    /**
     * @covers CommandAwareQuery::clientAddPerm
     */
    public function testClientAddPerm()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("clientaddperm"));
        $this->commandQuery->clientAddPerm(23, array());
    }

    /**
     * @covers CommandAwareQuery::clientDelPerm
     */
    public function testClientDelPerm()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("clientdelperm"));
        $this->commandQuery->clientDelPerm(23, array());
    }

    /**
     * @covers CommandAwareQuery::channelClientPermList
     */
    public function testChannelClientPermList()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("channelclientpermlist"));
        $this->commandQuery->channelClientPermList(23, 52);
    }

    /**
     * @covers CommandAwareQuery::channelClientAddPerm
     */
    public function testChannelClientAddPerm()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("channelclientaddperm"));
        $this->commandQuery->channelClientAddPerm(23, 42, array());
    }

    /**
     * @covers CommandAwareQuery::channelClientDelPerm
     */
    public function testChannelClientDelPerm()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("channelclientdelperm"));
        $this->commandQuery->channelClientDelPerm(23, 42, array());
    }

    /**
     * @covers CommandAwareQuery::permissionList
     */
    public function testPermissionList()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("permissionlist"));
        $this->commandQuery->permissionList();
    }

    /**
     * @covers CommandAwareQuery::permIdGetByName
     */
    public function testPermIdGetByName()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("permidgetbyname"));
        $this->commandQuery->permIdGetByName("b_client_ban_list");
    }

    /**
     * @covers CommandAwareQuery::permOverview
     */
    public function testPermOverview()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("permoverview"));
        $this->commandQuery->permOverview(23, 52);
    }

    /**
     * @covers CommandAwareQuery::permGet
     */
    public function testPermGet()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("permget"));
        $this->commandQuery->permGet(888);
    }

    /**
     * @covers CommandAwareQuery::permFind
     */
    public function testPermFind()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("permfind"));
        $this->commandQuery->permFind("b_client_ban_list");
    }

    /**
     * @covers CommandAwareQuery::permReset
     */
    public function testPermReset()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("permreset"));
        $this->commandQuery->permReset();
    }

    /**
     * @covers CommandAwareQuery::privilegeKeyList
     */
    public function testPrivilegeKeyList()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("privilegekeylist"));
        $this->commandQuery->privilegeKeyList();
    }

    /**
     * @covers CommandAwareQuery::privilegeKeyAdd
     */
    public function testPrivilegeKeyAdd()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("privilegekeyadd"));
        $this->commandQuery->privilegeKeyAdd(23, 1, 42);
    }

    /**
     * @covers CommandAwareQuery::privilegeKeyDelete
     */
    public function testPrivilegeKeyDelete()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("privilegekeydelete"));
        $this->commandQuery->privilegeKeyDelete("tokenKey");
    }

    /**
     * @covers CommandAwareQuery::privilegeKeyUse
     */
    public function testPrivilegeKeyUse()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("privilegekeyuse"));
        $this->commandQuery->privilegeKeyUse("tokenKey");
    }

    /**
     * @covers CommandAwareQuery::messageList
     */
    public function testMessageList()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("messagelist"));
        $this->commandQuery->messageList();
    }

    /**
     * @covers CommandAwareQuery::messageAdd
     */
    public function testMessageAdd()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("messageadd"));
        $this->commandQuery->messageAdd("uid", "test subject", "test message");
    }

    /**
     * @covers CommandAwareQuery::messageDel
     */
    public function testMessageDel()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("messagedel"));
        $this->commandQuery->messageDel(23);
    }

    /**
     * @covers CommandAwareQuery::messageGet
     */
    public function testMessageGet()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("messageget"));
        $this->commandQuery->messageGet(23);
    }

    /**
     * @covers CommandAwareQuery::messageUpdateFlag
     */
    public function testMessageUpdateFlag()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("messageupdateflag"));
        $this->commandQuery->messageUpdateFlag(743, 1);
    }

    /**
     * @covers CommandAwareQuery::complainList
     */
    public function testComplainList()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("complainlist"));
        $this->commandQuery->complainList();
    }

    /**
     * @covers CommandAwareQuery::complainAdd
     */
    public function testComplainAdd()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("complainadd"));
        $this->commandQuery->complainAdd(76, "Message");
    }

    /**
     * @covers CommandAwareQuery::complainDelAll
     */
    public function testComplainDelAll()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("complaindelall"));
        $this->commandQuery->complainDelAll(985);
    }

    /**
     * @covers CommandAwareQuery::complainDel
     */
    public function testComplainDel()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("complaindel"));
        $this->commandQuery->complainDel(23, 67);
    }

    /**
     * @covers CommandAwareQuery::banClient
     */
    public function testBanClient()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("banclient"));
        $this->commandQuery->banClient(23);
    }

    /**
     * @covers CommandAwareQuery::banList
     */
    public function testBanList()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("banlist"));
        $this->commandQuery->banList();
    }

    /**
     * @covers CommandAwareQuery::banAdd
     */
    public function testBanAdd()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("banadd"));
        $this->commandQuery->banAdd("87.76,.8.12");
    }

    /**
     * @covers CommandAwareQuery::banDel
     */
    public function testBanDel()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("bandel"));
        $this->commandQuery->banDel(23);
    }

    /**
     * @covers CommandAwareQuery::banDelAll
     */
    public function testBanDelAll()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("bandelall"));
        $this->commandQuery->banDelAll();
    }

    /**
     * @covers CommandAwareQuery::ftInitUpload
     */
    public function testFtInitUpload()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("ftinitupload"));
        $this->commandQuery->ftInitUpload("my Transfer id", 46, "/", 98442);
    }

    /**
     * @covers CommandAwareQuery::ftInitDowload
     */
    public function testFtInitDowload()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("ftinitdownload"));
        $this->commandQuery->ftInitDowload("myTransferId", 76, "/Image.jpg", "mypassword");
    }

    /**
     * @covers CommandAwareQuery::ftList
     */
    public function testFtList()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("ftlist"));
        $this->commandQuery->ftList();
    }

    /**
     * @covers CommandAwareQuery::ftGetFileList
     */
    public function testFtGetFileList()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("ftgetfilelist"));
        $this->commandQuery->ftGetFileList(98);
    }

    /**
     * @covers CommandAwareQuery::ftGetFileInfo
     */
    public function testFtGetFileInfo()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("ftgetfileinfo"));
        $this->commandQuery->ftGetFileInfo(87, "/Image.jpg");
    }

    /**
     * @covers CommandAwareQuery::ftStop
     */
    public function testFtStop()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("ftstop"));
        $this->commandQuery->ftStop("myTransferId");
    }

    /**
     * @covers CommandAwareQuery::ftDeleteFile
     */
    public function testFtDeleteFile()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("ftdeletefile"));
        $this->commandQuery->ftDeleteFile(23, "/Image.jpg");
    }

    /**
     * @covers CommandAwareQuery::ftCreateDir
     */
    public function testFtCreateDir()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("ftcreatedir"));
        $this->commandQuery->ftCreateDir(23, "My dir");
    }

    /**
     * @covers CommandAwareQuery::ftRenameFile
     *
     */
    public function testFtRenameFile()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("ftrenamefile"));
        $this->commandQuery->ftRenameFile(454, "/old.jpg", "/new.jpg");
    }

    /**
     * @covers CommandAwareQuery::customSearch
     *
     */
    public function testCustomSearch()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("customsearch"));
        $this->commandQuery->customSearch("test", "pattern");
    }

    /**
     * @covers CommandAwareQuery::customInfo
     *
     */
    public function testCustomInfo()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("custominfo"));
        $this->commandQuery->customInfo(9086);
    }

    /**
     * @covers CommandAwareQuery::whoami
     */
    public function testWhoami()
    {
        $this->commandQuery->expects($this->once())->method("query")->with($this->equalTo("whoami"));
        $this->commandQuery->whoami();
    }
}

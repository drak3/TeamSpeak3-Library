<?php

namespace devmx\Teamspeak3\Query\Transport;
use devmx\Teamspeak3\Query\Response\Event;
use devmx\Teamspeak3\Query\Response\CommandResponse;
use devmx\Teamspeak3\Query\Command;
require_once dirname( __FILE__ ) . '/../../../../../../src/devmx/Teamspeak3/Query/Transport/QueryTransportStub.php';

/**
 * Test class for QueryTransportStub.
 * Generated by PHPUnit on 2012-01-25 at 16:34:08.
 */
class QueryTransportStubTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var \devmx\Teamspeak3\Query\Transport\QueryTransportStub
     */
    protected $stub;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->stub = new QueryTransportStub();
    }

    
    /**
     * @covers devmx\Teamspeak3\Query\Transport\QueryTransportStub::connect
     * @covers devmx\Teamspeak3\Query\Transport\QueryTransportStub::isConnected
     */
    public function testConnect()
    {
        $this->stub->connect();
        $this->assertTrue($this->stub->isConnected());
    }

    
    /**
     * @covers devmx\Teamspeak3\Query\Transport\QueryTransportStub::getAllEvents
     * @covers devmx\Teamspeak3\Query\Transport\QueryTransportStub::addEvent
     */
    public function testGetAllEvents_simple()
    {
        $e = new Event('notifysomething', array());
        $this->stub->connect();
        $this->stub->addEvent($e);
        $this->assertEquals(array($e), $this->stub->getAllEvents());
    }
    
    /**
     * @covers devmx\Teamspeak3\Query\Transport\QueryTransportStub::getAllEvents
     * @covers devmx\Teamspeak3\Query\Transport\QueryTransportStub::addEvent
     */
    public function testGetAllEvents_times()
    {
        $e = new Event('notifysomething', array());
        $this->stub->connect();
        $this->stub->addEvent($e, 2);
        $this->assertEquals(array($e, $e), $this->stub->getAllEvents());
    }
    
    /**
     * @covers devmx\Teamspeak3\Query\Transport\QueryTransportStub::getAllEvents
     * @covers devmx\Teamspeak3\Query\Transport\QueryTransportStub::addEvent
     */
    public function testGetAllEvents_charge()
    {
        $e = new Event('notifysomething', array());
        $this->stub->connect();
        $this->stub->addEvent($e);
        $this->stub->addEvent($e, 1, true);
        $this->assertEquals(array($e), $this->stub->getAllEvents());
        $this->assertEquals(array($e), $this->stub->getAllEvents());
    }
    
    /**
     * @covers devmx\Teamspeak3\Query\Transport\QueryTransportStub::getAllEvents
     * @covers devmx\Teamspeak3\Query\Transport\QueryTransportStub::addEvent
     */
    public function testGetAllEvents_noEvents()
    {
        $this->stub->connect();
        $this->assertEquals(array(), $this->stub->getAllEvents());
    }
    
    
    /**
     * @expectedException \LogicException
     * @covers devmx\Teamspeak3\Query\Transport\QueryTransportStub::getAllEvents
     */
    public function testGetAllEvents_notConnected() {
        $e = new Event('notifysomething', array());
        $this->stub->addEvent($e);
        $this->stub->getAllEvents();
    }
     

    /**
     * @covers devmx\Teamspeak3\Query\Transport\QueryTransportStub::sendCommand
     * @covers devmx\Teamspeak3\Query\Transport\QueryTransportStub::addResponse
     */
    public function testSendCommand_simple()
    {
        $cmd = new Command('foo');
        $response = new CommandResponse($cmd, array());
        $this->stub->connect();
        $this->stub->addResponse($response);
        $this->assertEquals($response, $this->stub->sendCommand($cmd));
    }
    
    /**
     * @covers devmx\Teamspeak3\Query\Transport\QueryTransportStub::sendCommand
     * @covers devmx\Teamspeak3\Query\Transport\QueryTransportStub::addResponse
     */
    public function testSendCommand_multipleResponses() {
        $cmd1 = new Command('foo', array(), array('a', 'b'));
        $cmd2 = new Command('foo', array('a'=>'b'), array('a', 'b'));
        $r1 = new CommandResponse($cmd1, array('foo'=>'bar'));
        $r2 = new CommandResponse($cmd2, array('asdf'=>'sdf'));
        $this->stub->addResponse($r1);
        $this->stub->addResponse($r2);
        $this->stub->connect();
        $this->assertEquals($r2, $this->stub->sendCommand($cmd2));
        $this->assertEquals($r1, $this->stub->sendCommand(new Command('foo', array(), array('a', 'b'))));
    }
    
    /**
     * @covers devmx\Teamspeak3\Query\Transport\QueryTransportStub::sendCommand
     * @covers devmx\Teamspeak3\Query\Transport\QueryTransportStub::addResponse
     */
    public function testSendCommand_times() {
        $cmd1 = new Command('foo', array(), array('a', 'b'));
        $cmd2 = new Command('foo', array('a'=>'b'), array('a', 'b'));
        $r1 = new CommandResponse($cmd1, array('foo'=>'bar'));
        $r2 = new CommandResponse($cmd2, array('asdf'=>'sdf'));
        $this->stub->addResponse($r1);
        $this->stub->addResponse($r2,2);
        $this->stub->connect();
        $this->assertEquals($r2, $this->stub->sendCommand($cmd2));
        $this->assertEquals($r2, $this->stub->sendCommand($cmd2));
        $this->assertEquals($r1, $this->stub->sendCommand(new Command('foo', array(), array('a', 'b'))));
    }


    /**
     * @covers devmx\Teamspeak3\Query\Transport\QueryTransportStub::query
     * @covers devmx\Teamspeak3\Query\Transport\QueryTransportStub::addResponse
     */
    public function testQuery()
    {
        $response = new CommandResponse(new Command('bar', array('a'=>'b')), array('foo'=>'bar'));
        $this->stub->addResponse($response);
        $this->stub->connect();
        $this->assertEquals($response, $this->stub->query('bar', array('a'=>'b')));
    }

    /**
     * @covers devmx\Teamspeak3\Query\Transport\QueryTransportStub::waitForEvent
     * @covers devmx\Teamspeak3\Query\Transport\QueryTransportStub::addEvent
     */
    public function testWaitForEvent()
    {
        $e = new Event('notifysomething', array());
        $this->stub->connect();
        $this->stub->addEvent($e);
        $this->assertEquals(array($e), $this->stub->waitForEvent());
    }
    
    /**
     * @expectedException \LogicException
     * @covers devmx\Teamspeak3\Query\Transport\QueryTransportStub::waitForEvent
     * @covers devmx\Teamspeak3\Query\Transport\QueryTransportStub::addEvent
     */
    public function testWaitForEvent_noEvents()
    {
        $this->stub->connect();
        $this->stub->waitForEvent();
    }

    /**
     * @covers devmx\Teamspeak3\Query\Transport\QueryTransportStub::disconnect
     * @covers devmx\Teamspeak3\Query\Transport\QueryTransportStub::isConnected
     */
    public function testDisconnect()
    {
       $this->stub->connect();
       $this->stub->disconnect();
       $this->assertFalse($this->stub->isConnected());
    }
    
    /**
     * @expectedException \LogicException 
     */
    public function testAssertAllResponsesReceived() {
        $this->stub->connect();
        $this->stub->addResponse(new CommandResponse(new Command('foo')));
        $this->stub->assertAllResponsesReceived();
    }
    
    public function testAddResponses() {
        $r1 = new CommandResponse(new Command('foo'));
        $r2 = new CommandResponse(new Command('bar'));
        $this->stub->addResponses(array($r1, $r2));
        $this->stub->connect();
        $this->assertEquals($r1, $this->stub->sendCommand(new Command('foo')));
        $this->assertEquals($r2, $this->stub->sendCommand(new Command('bar')));
        $this->stub->assertAllResponsesReceived();
    }

}

?>

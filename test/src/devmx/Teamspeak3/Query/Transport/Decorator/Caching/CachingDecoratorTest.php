<?php

namespace devmx\Teamspeak3\Query\Transport\Decorator\Caching;
use devmx\Teamspeak3\Query\Command;
use devmx\Teamspeak3\Query\CommandResponse;
use devmx\Teamspeak3\Query\CommandAwareQuery;

require_once dirname( __FILE__ ) . '/../../../../../../../../src/devmx/Teamspeak3/Query/Transport/Decorator/Caching/CachingDecorator.php';

/**
 * Test class for CachingDecorator.
 * Generated by PHPUnit on 2012-03-31 at 11:41:55.
 */
class CachingDecoratorTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var CachingDecorator
     */
    protected $decorator;
    
    /**
     * @var \devmx\Teamspeak3\Query\Transport\Decorator\Caching\CachingDecorator
     */
    protected $cache;
    
    /**
     * @var \devmx\Teamspeak3\Query\Transport\QueryTransportStub
     */
    protected $query;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->cache = $this->getMockForAbstractClass('\devmx\Teamspeak3\Query\Transport\Decorator\Caching\CacheInterface');
        $this->query = new \devmx\Teamspeak3\Query\Transport\QueryTransportStub();
        $this->decorator = new CachingDecorator($this->query, $this->cache);
    }
     
    public function testSendCommand_cache() {
        $this->decorator->setCacheableCommands(array('clientlist'));
        
        $cl_cmd = new Command('clientlist');
        $cl_r = new CommandResponse($cl_cmd);
        
        $this->query->addResponse($cl_r);
        
        $this->cache->expects($this->exactly(2))
                    ->method('isCached')
                    ->with(md5(serialize($cl_cmd)))
                    ->will($this->onConsecutiveCalls(false, true));
        
        $this->cache->expects($this->once())
                    ->method('cache')
                    ->with($this->equalTo(md5(serialize($cl_cmd))), $this->equalTo($cl_r));
        
        $this->cache->expects($this->once())
                    ->method('getCache')
                    ->with($this->equalto(md5(serialize($cl_cmd))))
                    ->will($this->returnValue($cl_r));
        
        $this->decorator->connect();
        $this->assertEquals($cl_r, $this->decorator->sendCommand($cl_cmd));
        $this->assertEquals($cl_r, $this->decorator->sendCommand($cl_cmd));
        
        $this->query->assertAllResponsesReceived();
    }

    /**
     * @covers devmx\Teamspeak3\Query\Transport\Decorator\Caching\CachingDecorator::getCacheAbleCommands
     * @todo Implement testGetCacheAbleCommands().
     */
    public function testSetGetCacheAbleCommands()
    {
        $this->decorator->setCacheableCommands(array('foo', 'bar'));
        $this->assertEquals(array('foo', 'bar'), $this->decorator->getCacheableCommands());
    }
    
    public function testDefaults() {
        $this->assertEquals(CommandAwareQuery::getNonChangingCommands(), $this->decorator->getCacheAbleCommands());
    }
    
    /**
     * @dataProvider nameProvider
     */
    public function testServerAwareCaching_Port($useCmd1, $useCmd2, $name1, $name2, $clientlistCommand){
        $this->decorator->setCacheableCommands(array('clientlist'));
        
        $useResponse1 = new CommandResponse($useCmd1);
        $useResponse2 = new CommandResponse($useCmd2);
        $clientlistResponse1 = new CommandResponse($clientlistCommand, array('asdf'=>1));
        $clientlistResponse2 = new CommandResponse($clientlistCommand, array('asdf'=>2));
        
        $this->query->addResponses(array($useResponse1,  $clientlistResponse1));
        $that = $this;
        
        //rewrite this somehow nicer...
        $this->cache->expects($this->exactly(3))
                    ->method('isCached')
                    ->will($this->returnCallback(function($name) use ($name1, $name2, $that) {
                        //basicaly we expect prefix1 at 1 and prefix2 at 2 and 3
                        static $call = 0;
                        $call++;
                        if($name === $name1 && $call === 1) {
                            return false;
                        }
                        elseif($name === $name2 && $call === 2 ) {
                            return false;
                        }
                        elseif($name === $name2 && $call === 3) {
                            return true;
                        }
                        else {
                            echo $name1, $name2;
                            $that->fail(sprintf('unexpected call with %s at %d', $name, $call));
                        }
                    }));
        $this->cache->expects($this->exactly(2))
                    ->method('cache');
        $this->cache->expects($this->once())
                    ->method('getCache')
                    ->with($this->equalTo($name2))
                    ->will($this->returnValue($clientlistResponse2));
        $this->decorator->connect();
        
        $this->decorator->sendCommand($useCmd1);
        $this->assertEquals($clientlistResponse1, $this->decorator->sendCommand($clientlistCommand));
        $this->query->assertAllResponsesReceived();
        
        $this->query->addResponses(array($useResponse2, $clientlistResponse2));
        $this->decorator->sendCommand($useCmd2);
        $this->assertEquals($clientlistResponse2, $this->decorator->sendCommand($clientlistCommand));
        $this->query->assertAllResponsesReceived();
        $this->assertEquals($clientlistResponse2, $this->decorator->sendCommand($clientlistCommand));
    }
    
    public function nameProvider() {
        $clientlistCommand = new Command('clientlist');
        return array(
            array(
                new Command('use', array('port'=>9987)),
                new Command('use', array('port'=>9988)),
                'devmx.ts3.vserver.port.9987.'.md5(serialize($clientlistCommand)),
                'devmx.ts3.vserver.port.9988.'.md5(serialize($clientlistCommand)),
                $clientlistCommand
            ),
            array(
                new Command('use', array('id'=>1)),
                new Command('use', array('id'=>2)),
                'devmx.ts3.vserver.id.1.'.md5(serialize($clientlistCommand)),
                'devmx.ts3.vserver.id.2.'.md5(serialize($clientlistCommand)),
                $clientlistCommand,
            )
        );
    }

}

?>

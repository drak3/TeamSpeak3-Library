<?php

namespace devmx\Teamspeak3\Query\Transport\Decorator;

use devmx\Teamspeak3\Query\Response\CommandResponse;
use devmx\Teamspeak3\Query\Command;
use devmx\Teamspeak3\Query\Transport\Decorator\Logging\LoggingInterface;

/**
 * Test class for LoggingQueryDecorator.
 * Generated by PHPUnit on 2012-03-28 at 18:01:48.
 */
class LoggingDecoratorTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var LoggingQueryDecorator
     */
    protected $decorator;
    
    protected $transport;
    
    protected $logger;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->logger = $this->getMockForAbstractClass('\devmx\Teamspeak3\Query\Transport\Decorator\Logging\LoggingInterface');
        $this->transport = $this->getMock('\devmx\Teamspeak3\Query\Transport\TransportInterface');
        $this->decorator = new LoggingDecorator($this->transport, $this->logger);
    }

    /**
     * @expectedException \RuntimeException
     */
    public function testSendCommand_Exception() {
        $this->transport->expects($this->once())
                     ->method('sendCommand')
                     ->will($this->throwException(new \RuntimeException('foo')));
        $this->logger->expects($this->once())
                     ->method('addLog')
                     ->with($this->anything(), $this->equalTo(LoggingInterface::LOGGING_LEVEL_ERROR));
        $this->decorator->query('foo');
    }
    
    public function testSendCommand_Error() {
        $this->transport->expects($this->once())
                        ->method('sendCommand')
                        ->will($this->returnValue(new CommandResponse(new Command('asdf'), array(), 1, 'error')));
        $this->logger->expects($this->once())
                     ->method('addLog')
                     ->with($this->anything(), $this->equalTo(LoggingInterface::LOGGING_LEVEL_WARNING));
        $this->decorator->query('foo');
    }
    
    public function testSendCommand_Info() {
        $this->transport->expects($this->once())
                        ->method('sendCommand')
                        ->will($this->returnValue(new CommandResponse(new Command('foo'))));
        $this->logger->expects($this->once())
                     ->method('addLog')
                     ->with($this->anything(), $this->equalTo(LoggingInterface::LOGGING_LEVEL_INFO));
        $this->decorator->query('foo');
    }
    
    /**
     * @expectedException \RuntimeException
     */
    public function testConnect_Exception() {
        $this->transport->expects($this->once())
                     ->method('connect')
                     ->will($this->throwException(new \RuntimeException('foo')));
        $this->logger->expects($this->once())
                     ->method('addLog')
                     ->with($this->anything(), $this->equalTo(LoggingInterface::LOGGING_LEVEL_ERROR));
        $this->decorator->connect();
    }
    
    public function testConnect_Info() {
        $this->transport->expects($this->once())
                        ->method('connect')
                        ->will($this->returnValue(true));
        $this->logger->expects($this->once())
                     ->method('addLog')
                     ->with($this->anything(), $this->equalTo(LoggingInterface::LOGGING_LEVEL_INFO));
        $this->decorator->connect();
    }
    
    /**
     * @expectedException \RuntimeException 
     */
    public function testDisconnect_Exception() {
        $this->transport->expects($this->once())
                     ->method('disconnect')
                     ->will($this->throwException(new \RuntimeException('foo')));
        $this->logger->expects($this->once())
                     ->method('addLog')
                     ->with($this->anything(), $this->equalTo(LoggingInterface::LOGGING_LEVEL_ERROR));
        $this->decorator->disconnect();
    }
    
    public function testDisconnect_Info() {
        $this->transport->expects($this->once())
                        ->method('disconnect')
                        ->will($this->returnValue(true));
        $this->logger->expects($this->once())
                     ->method('addLog')
                     ->with($this->anything(), $this->equalTo(LoggingInterface::LOGGING_LEVEL_INFO));
        $this->decorator->disconnect();
    }
    
    /**
     * @expectedException \RuntimeException 
     */
    public function testGetAllEvents_Exception() {
        $this->transport->expects($this->once())
                     ->method('getAllEvents')
                     ->will($this->throwException(new \RuntimeException('foo')));
        $this->logger->expects($this->once())
                     ->method('addLog')
                     ->with($this->anything(), $this->equalTo(LoggingInterface::LOGGING_LEVEL_ERROR));
        $this->decorator->getAllEvents();
    }
    
    public function testGetAllEvents_Info() {
        $this->transport->expects($this->once())
                        ->method('getAllEvents')
                        ->will($this->returnValue(array()));
        $this->logger->expects($this->once())
                     ->method('addLog')
                     ->with($this->anything(), $this->equalTo(LoggingInterface::LOGGING_LEVEL_INFO));
        $this->decorator->getAllEvents();
    }
    
    public function testIsConnected_connected() {
        $this->transport->expects($this->once())
                        ->method('isConnected')
                        ->will($this->returnValue(true));
        $this->logger->expects($this->once())
                     ->method('addLog')
                     ->with($this->anything(), $this->equalTo(LoggingInterface::LOGGING_LEVEL_INFO));
        $this->decorator->isConnected();
    }
    
    public function testIsConnected_notConnected() {
        $this->transport->expects($this->once())
                        ->method('isConnected')
                        ->will($this->returnValue(false));
        $this->logger->expects($this->once())
                     ->method('addLog')
                     ->with($this->anything(), $this->equalTo(LoggingInterface::LOGGING_LEVEL_INFO));
        $this->decorator->isConnected();
    }
    
    /**
     * @expectedException \RuntimeException 
     */
    public function testWaitForEvent_Exception() {
        $this->transport->expects($this->once())
                     ->method('waitForEvent')
                     ->will($this->throwException(new \RuntimeException('foo')));
        $this->logger->expects($this->once())
                     ->method('addLog')
                     ->with($this->anything(), $this->equalTo(LoggingInterface::LOGGING_LEVEL_ERROR));
        $this->decorator->waitForEvent();
    }
    
    public function testWaitForEvent_Info() {
        $this->transport->expects($this->once())
                        ->method('waitForEvent')
                        ->will($this->returnValue(array()));
        $this->logger->expects($this->once())
                     ->method('addLog')
                     ->with($this->anything(), $this->equalTo(LoggingInterface::LOGGING_LEVEL_INFO));
        $this->decorator->waitForEvent();
    }

}

?>

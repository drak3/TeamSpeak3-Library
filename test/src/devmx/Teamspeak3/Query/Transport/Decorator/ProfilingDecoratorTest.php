<?php

namespace devmx\Teamspeak3\Query\Transport\Decorator;

require_once dirname( __FILE__ ) . '/../../../../../../../src/devmx/Teamspeak3/Query/Transport/Decorator/ProfilingDecorator.php';

/**
 * Test class for ProfilingDecorator.
 * Generated by PHPUnit on 2012-03-28 at 16:07:09.
 */
class ProfilingDecoratorTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var ProfilingDecorator
     */
    protected $decorator;
    
    protected $transport;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->transport = $this->getMockBuilder('\devmx\Teamspeak3\Query\Transport\QueryTransport')
                                ->disableOriginalConstructor()
                                ->getMock();
        $this->decorator = $this->getMockBuilder('\devmx\Teamspeak3\Query\Transport\Decorator\ProfilingDecorator')
                                ->setConstructorArgs(array($this->transport))
                                ->setMethods(array('time'))
                                ->getMock();
        
    }
    
    public function testGetConnectionTimes() {
        $this->decorator->expects($this->exactly(2))
                        ->method('time')
                        ->will($this->onConsecutiveCalls(23, 25));
        $this->decorator->connect();
        $this->assertEquals(array(2), $this->decorator->getConnectionTimes());
    }
    
    public function testGetTotalDisConnectionTime() {
        $this->decorator->expects($this->exactly(4))
                        ->method('time')
                        ->will($this->onConsecutiveCalls(12, 14.2, 23.44, 29));
        $this->decorator->disconnect();
        $this->decorator->disconnect();
        $this->assertEquals(2.2+(29-23.44), $this->decorator->getTotalDisconnectionTime());
    }
    
    public function testGetTotalTime() {
        $this->decorator->expects($this->exactly(10))
                        ->method('time')
                        ->will($this->onConsecutiveCalls(1, 1.1, 23, 24.4, 25, 28, 29, 29.3, 30, 30.1));
        $this->decorator->connect();
        $this->decorator->query('asdf');
        $this->decorator->waitForEvent();
        $this->decorator->getAllEvents();
        $this->decorator->disconnect();
        $this->assertEquals(4.9, $this->decorator->getTotalTime());
    }
    
    public function testGetNumberOfGetAllEvents() {
        $this->decorator->expects($this->exactly(6))
                        ->method('time')
                        ->will($this->onConsecutiveCalls(1, 1.4, 3, 4.1, 6.2, 7.1));
        $this->decorator->getAllEvents();
        $this->decorator->getAllEvents();
        $this->decorator->getAllEvents();
        $this->assertEquals(0.8, $this->decorator->getAverageGetAllEventsTime());
    }

    

}

?>

<?php

namespace devmx\Teamspeak3\Query\Transport\Common;
use devmx\Teamspeak3\Query\Command;
use devmx\Teamspeak3\Query\Exception\InvalidCommandException;

 


/**
 * Test class for CommandTranslator.
 * Generated by PHPUnit on 2011-11-07 at 21:47:48.
 */
class CommandTranslatorTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var CommandTranslator
     */
    protected $translator;

    /**
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->translator = new CommandTranslator;

    }
    
    /**
     * tests if command with simple arguments is translated correctly
     */
    public function testTranslateArguments()
    {
        $cmd = new Command("use", Array("port"=>9987));
        $this->assertEquals("use port=9987\n",$this->translator->translate($cmd));
        
        $cmd = new Command("asdf", Array("foo"=>"bar", "asdf"=>123));
        $this->assertEquals("asdf foo=bar asdf=123\n", $this->translator->translate($cmd));
    }
    
    public function testTranslateMultipleArgumentValues() {
        $cmd = new Command("banclient", array(array('clid' => 1), array('clid'=> 2), array('clid'=>3)));
        $this->assertEquals("banclient clid=1|clid=2|clid=3\n", $this->translator->translate( $cmd ));
    }
    
    public function testTranslateMultipleArgumentValues_RenderNonArrayFirst() {
        $cmd = new Command('foobar', array('foo'=>'bar', array('cid'=>1), array('cid'=>2)));
        $this->assertEquals('foobar foo=bar cid=1|cid=2'."\n", $this->translator->translate($cmd));
    }
    
    public function testTranslateOptions() {
        $cmd = new Command("test", Array(), Array("foo"));
        $this->assertEquals("test -foo\n", $this->translator->translate($cmd));
        $cmd = new Command("test", Array(), Array("foo", "bar"));
        $this->assertEquals("test -bar -foo\n", $this->translator->translate($cmd));
    }
    
    public function testEscaping() {
        $this->assertEquals('test foo=\s\sasdf\p\p\s\s\s'."\n", $this->translator->translate(new Command("test", Array("foo"=>"  asdf||   "))));
    }
    
    public function testTranslateFullCommand() {
        $cmd = new Command("test", array("foo"=>"bar", array('asdf'=>'  '), array('asdf'=>'asdf')), array("fnord"));
        $this->assertEquals('test foo=bar asdf=\s\s|asdf=asdf -fnord'."\n", $this->translator->translate( $cmd ));
    }
    
    /**
     * @dataProvider invalidCommandProvider
     */
    public function testIsValidInvalidCommands($cmd)
    {
        $this->assertFalse($this->translator->isValid($cmd));
    }
    
    /**
     *@dataProvider invalidCommandProvider
     */
    public function testExceptionOnInvalidCommand($cmd, $expectedMessage, $expectedType, $expectedValue) {
        try {
            $this->translator->translate($cmd);
        }
        catch(\devmx\Teamspeak3\Query\Exception\InvalidCommandException $e) {
            $this->assertEquals($expectedMessage, $e->getMessage());
            $this->assertEquals($expectedType, $e->getInvalidityType());
            $this->assertEquals($expectedValue, $e->getInvalidValue());
            return;
        }
        $this->fail('No exception thrown');
    }
    
    
    public function invalidCommandProvider() {
        $time = new \DateTime();
        return Array (
            Array(new Command($time), 'Invalid command "<object of class "DateTime">" because name "<object of class "DateTime">" is invalid.', InvalidCommandException::INVALID_NAME, $time),
            Array(new Command("!asddf"), 'Invalid command "!asddf" because name "!asddf" is invalid.', InvalidCommandException::INVALID_NAME, "!asddf"),
            Array(new Command("asdf", array("foo" => "bar"), Array(false) ), 'Invalid command "asdf" because option "<boolean false>" is invalid.', InvalidCommandException::INVALID_OPTION, false),
            Array(new Command("as df"), 'Invalid command "as df" because name "as df" is invalid.', InvalidCommandException::INVALID_NAME, 'as df'),
            Array(new Command("foo", array("foo\\bar"=>"bar")), 'Invalid command "foo" because parameter name "foo\bar" is invalid.', InvalidCommandException::INVALID_PARAMETER_NAME, 'foo\bar'),
            Array(new Command("foo", array(), array("fo o")), 'Invalid command "foo" because option "fo o" is invalid.', InvalidCommandException::INVALID_OPTION, 'fo o'),
            Array(new Command('foo', array('foo'=>$time)), 'Invalid command "foo" because parameter value "<object of class "DateTime">" is invalid.', InvalidCommandException::INVALID_PARAMETER_VALUE, $time),
            Array(new Command('foo', array(), array('-asdf')), 'Invalid command "foo" because option "-asdf" is invalid.', InvalidCommandException::INVALID_OPTION, '-asdf')
        );
    }
    
    public function testBooleanToIntTranslation() {
        $cmd = new Command('foo', array('foo'=>true, 'bar'=>false));
        $this->assertEquals("foo bar=0 foo=1\n", $this->translator->translate($cmd));
    }
    
    public function testTranslateNameWithNumber() {
        $this->assertTrue($this->translator->isValid( new Command("tokenadd", array("tokenid1" => 1))));
    }

}

?>

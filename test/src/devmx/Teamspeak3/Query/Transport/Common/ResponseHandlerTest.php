<?php

namespace devmx\Teamspeak3\Query\Transport\Common;
use devmx\Teamspeak3\Query\Command;
 
/**
 * Test class for ResponseHandler.
 * Generated by PHPUnit on 2012-01-21 at 16:39:03.
 */
class ResponseHandlerTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var \devmx\Teamspeak3\Query\Transport\Common\ResponseHandler
     */
    protected $handler;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->handler = new ResponseHandler();

    }
    
    public function testExtraErrorMessages() {
        $cmd = new Command('foo');
        $raw = "foo=bar\nerror id=32 msg=failed extra_message=what\\sthe\\shell failed_permid=123\n";
        $response = $this->handler->getResponseInstance($cmd , $raw);
        $response = $response['response'];
        $this->assertEquals(32, $response->getErrorID());
        $this->assertEquals('failed', $response->getErrorMessage());
        $this->assertEquals('what the hell', $response->getErrorValue('extra_message'));
        $this->assertEquals(123, $response->getErrorValue('failed_permid'));
    }

    /**
     * @dataProvider unescapeProvider
     */
    public function testUnescape($escaped, $unescaped)
    {
        $this->assertEquals($unescaped, $this->handler->unescape($escaped));
    }
    
    public function unescapeProvider() {
        return array(
            array('this\sis\s\nsimple\nisnt it?', "this is \nsimple\nisnt it?"),
            array('\s\s\s\s', "    "),
            array('\s\n\s\s\n\t', " \n  \n\t"),
            array('\p\s\n\t', "| \n\t")
        );
    }

    /**
     * tests if responses with just error message in it are parsed correctly
     */
    public function testGetResponseInstance_ErrorOnly()
    {
        $cmd = new Command('foo');
        $raw = "error id=0 msg=ok\n";
        $parsed = $this->handler->getResponseInstance($cmd , $raw);
        $this->assertTrue(isset($parsed['response']));
        $resp = $parsed['response'];
        $this->assertEquals(0, $resp->getErrorID());
        $this->assertEquals('ok', $resp->getErrorMessage());
        $this->assertEquals(array(), $resp->getItems());
        $this->assertEquals($cmd, $resp->getCommand());
        
        $cmd = new Command('foo');
        $raw = "error id=12 msg=failed\\shard";
        $parsed = $this->handler->getResponseInstance($cmd , $raw);
        $this->assertTrue(isset($parsed['response']));
        $resp = $parsed['response'];
        $this->assertEquals(12, $resp->getErrorID());
        $this->assertEquals('failed hard', $resp->getErrorMessage());
        $this->assertEquals(array(), $resp->getItems());
    }
    
    /**
     * @dataProvider itemProvider 
     */
    public function testGetResponseInstance_WithItems($raw, $expected) {
        $cmd = new Command('foo');
        $parsed = $this->handler->getResponseInstance($cmd , $raw);
        $parsed = $parsed['response'];
        $this->assertEquals($expected, $parsed->getItems());
    }
    
    
    public function itemProvider() {
        $raw1 = <<<'EOF'
foo=bar bar=foo asdf=jklö
error id=0 msg=ok

EOF;
        $raw2 = <<<'EOF'
foo=bar bar=foo asdf=jklö|foo=bar2 bar=foo asdf=jklö2
error id=0 msg=ok

EOF;
        $raw3 = <<<'EOF'
foo=bar\sf bar=foo\n\t asdf=jklö|foo=bar2 bar=foo\ps asdf=jklö2
error id=0 msg=ok

EOF;
        $raw4 = <<<'EOF'
a= b= foo=true bar=123 asdf foo=bar
error id=0 msg=ok
EOF;
        return array(
          array($raw1, array(array("foo"=>"bar", "bar"=>"foo", "asdf"=>"jklö"))),
          array($raw2, array(array("foo"=>"bar", "bar"=>"foo", "asdf"=>"jklö"), array("foo"=>"bar2", "bar"=>"foo", "asdf"=>"jklö2"))),
          array($raw3, array(array("foo"=>"bar f", "bar"=>"foo\n\t", "asdf"=>"jklö"), array("foo"=>"bar2", "bar"=>"foo|s", "asdf"=>"jklö2"))),
          array($raw4, array(array('a'=>'', 'b'=>'', 'foo'=>true, 'bar'=>123, 'asdf'=>'', 'foo'=>'bar'))),            
        );
    }
    
    
    public function testGetResponseInstance_WithEvents() {
        $cmd = new Command('foo');
        $raw = <<<'EOF'
notifycliententerview cfid=12 ctid=23
client=foo asdf=bar
error id=0 msg=ok

EOF;
        $parsed = $this->handler->getResponseInstance($cmd , $raw);
        $this->assertEquals(1, count($parsed['events']));
        $event = $parsed['events'][0];
        $this->assertEquals(array(array("cfid"=>12, "ctid"=>23)), $event->getItems());
    }
    
    public function testGetResponseInstance_RealLife() {
        $raw = file_get_contents(__DIR__.'/reallife.response');
        $cmd = new Command('foo');
        $parsed = $this->handler->getResponseInstance($cmd, $raw);
        $parsed = $parsed['response'];
        $this->assertInstanceOF('\devmx\Teamspeak3\Query\Response\CommandResponse', $parsed);
        $this->assertEquals(0, $parsed->getErrorID());
        $this->assertEquals('[spacer1]---', $parsed->getValue('channel_name', 2));
    }
    
       
    public function testIsCompleteResponse()
    {
        $this->assertTrue($this->handler->isCompleteResponse('This\sis\sa\sresponse'."\n".'error id=0 msg=ok'."\n"));
        $this->assertFalse($this->handler->isCompleteResponse('This\sis\sa\sresponse'."\n".'error\sid=0\smsg=ok'."\n"));
        $this->assertFalse($this->handler->isCompleteResponse("Test\nerror id=0 msg=ok"));
    }

    /**
     * tests response with event instances only
     */
    public function testGetEventInstances()
    {
        $events = <<<'EOF'
notifyservermoved cid=114 foo=bar
notifysomeothercrap asdfg=345 bar=foo

EOF;
        $parsedEvents = $this->handler->getEventInstances($events);
        $this->assertEquals(2,count($parsedEvents));
        $this->assertInstanceOf('\devmx\Teamspeak3\Query\Response\Event', $parsedEvents[0], $parsedEvents[1]);
        $this->assertEquals(114, $parsedEvents[0]->getValue('cid'));
        $this->assertEquals('notifysomeothercrap', $parsedEvents[1]->getReason());
    }

    public function testGetResponseInstance_EventAfterCommand() {
        $raw = <<<'EOF'
notifysomething foo=bar asdf=jklö
notifybar asdf=sdff fnord=asd
foo=bar asdf=sdg|foo=bar2 asdf=sdg2 
error id=0 msg=ok
notifybar asdf=sdff fnord=asd

EOF;
        $cmd = new Command('foo');
        $parsed = $this->handler->getResponseInstance($cmd, $raw);
        $this->assertCount(2, $parsed);
        $this->assertTrue(isset($parsed['events']));
        $this->assertCount(3, $parsed['events']);
        $this->assertEquals('ok', $parsed['response']->getErrorMessage());
    }

    public function testIsValidQueryIdentifyer() {
        $this->assertTrue($this->handler->isValidQueryIdentifyer("TS3\n"));
    }
    
    public function testIsCompleteEvent() {
        $incompleteEvent = "notifysomething this=that notyetfinished";
        $completeEvent = "notifysomething this=that finished=1234\n";
        $this->assertFalse($this->handler->isCompleteEvent($incompleteEvent));
        $this->assertTrue($this->handler->isCompleteEvent($completeEvent));
        $this->assertFalse($this->handler->isCompleteEvent(''));
    }
    
    public function testSpecialValues() {
        $cmd = new Command('foo');
        
        $toParse = "foo= jkl asdf=123\nerror id=0 msg=ok";
        
        $response = $this->handler->getResponseInstance($cmd, $toParse);
        $response = $response['response'];
        
        $parsed = array(array('foo'=>'', 'jkl'=>'' , 'asdf'=>123));
        
        $this->assertEquals($parsed, $response->getItems());
    }
    
    public function testGetBanTime() {
        $toParse = "\n\rerror id=3329 msg=connection\\sfailed,\\syou\\sare\\sbanned extra_msg=you\\smay\\sretry\\sin\\s508\\sseconds\\n\\r";
        $this->assertTrue($this->handler->containsBanMessage($toParse));
        $this->assertEquals(508, $this->handler->extractBanTime($toParse));
    }
    
    
    public function testGetBanTime_FloodBan() {
        $toParse = 'foo= bar=true asdf=false'."\n".'error id=3331 msg=banned\r';
        $this->assertTrue($this->handler->containsBanMessage($toParse));
        $this->assertEquals(0, $this->handler->extractBanTime($toParse));
    }
    
    public function testGetBanTime_NoBan() {
        $toParse = 'foo= bar=true asdf=false'."\n".'error id=3332 msg=banned extra_msg=you\smay\sretry\sin\s63\sseconds\n\r'."\n";
        $this->assertFalse($this->handler->containsBanMessage($toParse));
    }
    
}

?>
